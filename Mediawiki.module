<?php
// Written by Mitch Schwenk <tazzytazzy at yahoo (.) com
// Updates by Maarten van Dantzich mediawiki.org User:Thinkling
//
//  v 0.4 - 2007-0729
//     Maarten-added support for multiple wikis by putting settings into array
//  v 0.3.2 - 2007-0725

/*----------------------------------------------------------------------
 *
 * EDIT THESE SETTINGS to match your install
 *
 *----------------------------------------------------------------------*/

/* For each wiki that shares the Drupal login front end, create a set
 * of settings here that matches what you have in LocalSettings.php for
 * the same variable FOR THAT WIKI.
 */
$GLOBALS['wgAuthDrupal_wiki_settings'] = array (

		// settings for wiki 1  (i.e. copy values from wiki1/LocalSettings.php)
		array(
			'wgCookieDomain' 	=> '.trailheadrevolution.com',
			'wgDBname' 			=> 'wiki',
			'wgDBprefix' 		=> 'wiki_',

			// **IF** you set wgCookiePath in wiki/LocalSettings, set it to
			// the same thing here; if don't see it in wiki/LocalSettings.php,
			// leave it alone.
			'wgCookiePath' 		=> '/'
		)

		// settings for wiki 2  (i.e. copy values from wiki2/LocalSettings.php)
		// DELETE if you only have 1 wiki.
		, array(
			'wgCookieDomain' 	=> 'test.trailheadrevolution.com',
			'wgDBname' 			=> 'wiki',
			'wgDBprefix' 		=> 'wiki_',
			'wgCookiePath' 		=> '/'
		)

		// NOTE: to add wikis, copy #2 and modify to suit

	);


/*----------------------------------------------------------------------
 *
 * DO NOT EDIT BELOW HERE
 *
 *----------------------------------------------------------------------*/

/* set wgCookiePrefix from the values of wgDBprefix and wgDBname
 * $vals is an array of per-wiki settings, i.e. one of the elements of
 *   $GLOBALS['wgAuthDrupal_wiki_settings'
 */

foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $key => $vals) {

	if ( $vals['wgDBprefix'] ) {
		$GLOBALS['wgAuthDrupal_wiki_settings'][$key]['wgCookiePrefix'] =
			$vals['wgDBname'] . '_' . $vals['wgDBprefix'];
	}
	elseif ( $vals['wgSharedDB'] ) {
		// This is not supported yet--haven't researched it--Maarten.
		// XXX should throw an error into watchdog log?
		$GLOBALS['wgAuthDrupal_wiki_settings'][$key]['wgCookiePrefix'] =
			$vals['wgSharedDB'];
	}
	else {
		$GLOBALS['wgAuthDrupal_wiki_settings'][$key]['wgCookiePrefix'] =
			$vals['wgDBname'];
	}
}

// this lifted from wiki/include/DefaultSettings.php
$proto = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
$GLOBALS['wgCookieSecure'] = ($proto == 'https');



// XXX This is virtually the same code as StaticUserLogout in AuthDrupal.php
// XXX and should probably move into a utility include file and be shared
function mediawiki_StaticUserLogout() {

	foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals)
	{
		// delete the user's identifying cookies
		setcookie( $vals['wgCookiePrefix'].'_session', '', time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		setcookie( $vals['wgCookiePrefix'].'UserName', '', time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		setcookie( $vals['wgCookiePrefix'].'UserID',   '', time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		setcookie( $vals['wgCookiePrefix'].'Token',    '', time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );

		// Remember when the user logged out, to prevent seeing cached pages
		$ts_now = gmdate( 'YmdHis', time() ); // emulates wfTimestampNow()
		setcookie( $vals['wgCookiePrefix'].'LoggedOut', $ts_now, time() + 86400, $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
	}
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 */
function mediawiki_perm() {
  return array('access content');
} // function onthisdate_perm()

function mediawiki_user($op, &$edit, &$user, $category = NULL) {

  switch ($op) {
    case 'login':
		// create seperate session id so mediawiki can see the user!
		$exp = time() + 2592000; // one month in seconds
		$data =  $user->name . ":" . $_SERVER["REMOTE_ADDR"];
		$data = mediawiki_encode($data);
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// set the cookie that communicates the username
			setcookie('DRXtrArgs', $data, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );

			// remove the loggedout cookie--not sure this is necessary; MW itself does not
			// seem to do it when a user logs back in thru MW
			setcookie( $vals['wgCookiePrefix'].'LoggedOut', '', time() - 3600,  $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		}
      break;

    case 'logout':
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// delete the cookie that communicates the username
			setcookie("DRXtrArgs", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain']);
		}
		mediawiki_StaticUserLogout();
      break;

  }
}

        /**
         * Encode a string
         * @param string $data String of text to be encoded
         * @return string Encoded data
         */
        function mediawiki_encode($data){
                require_once('crypto.php'); // require the phpFreaksCrypto class

                $crypto = new phpFreaksCrypto();
                $encrypted_data = $crypto->encrypt($data);
                return $encrypted_data;
        }
?>